pipeline {
  agent any

  environment {
    GIT_CREDENTIALS = 'TSSH'
    DEPLOY_DIR      = '/opt/myapp/backend'
    SERVICE_NAME    = 'myapp-backend.service'
  }

  stages {
    stage('Prepare & Checkout') {
      steps {
        deleteDir()
        sshagent([env.GIT_CREDENTIALS]) {
          sh '''
            # –ö–ª–æ–Ω–∏–º –∏–ª–∏ –∞–ø–¥–µ–π—Ç–∏–º workspace/backend
            if [ ! -d backend ]; then
              git clone git@github.com:artyomchumachenko/jefferson-api.git backend
            fi
            cd backend
            git fetch origin master
          '''
        }
      }
    }

    stage('Check ‚Üí Build & Deploy if needed') {
      steps {
        script {
          dir('backend') {
            // –ø–æ–ª—É—á–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π –∏ —É–¥–∞–ª—ë–Ω–Ω—ã–π —Ö–µ—à
            def local  = sh(script: 'git rev-parse HEAD',            returnStdout: true).trim()
            def remote = sh(script: 'git rev-parse origin/master',   returnStdout: true).trim()

            if (local == remote) {
              echo "‚ö†Ô∏è –ù–µ—Ç –Ω–æ–≤—ã—Ö –∫–æ–º–º–∏—Ç–æ–≤ (–ª–æ–∫–∞–ª—å–Ω—ã–π –∏ origin/master = ${local}). –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ–º pipeline."
              // –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —à–∞–≥–∏, –Ω–æ —Å—á–∏—Ç–∞–µ–º –±–∏–ª–¥ —É—Å–ø–µ—à–Ω—ã–º
              currentBuild.result = 'SUCCESS'
              return
            }

            echo "‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–æ–≤—ã–µ –∫–æ–º–º–∏—Ç—ã (–ª–æ–∫–∞–ª—å–Ω—ã–π ${local} vs origin ${remote}). –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä–∫—É ‚Üí –¥–µ–ø–ª–æ–π."

            // –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–≤–µ–∂–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            sh 'git reset --hard origin/master'

            // —Å–±–æ—Ä–∫–∞
            sh 'mvn clean package -DskipTests'

            // –∫–æ–ø–∏—Ä—É–µ–º –≤—Å—ë –∏–∑ backend –≤ –ø—Ä–æ–¥–æ–≤—É—é –ø–∞–ø–∫—É
            sh """
              rm -rf ${env.DEPLOY_DIR}/*
              rsync -av --delete . ${env.DEPLOY_DIR}/
            """

            // –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞
            sh "systemctl restart ${env.SERVICE_NAME}"
          }
        }
      }
    }
  }

  post {
    success { echo 'üéâ Pipeline –æ—Ç—Ä–∞–±–æ—Ç–∞–ª —É—Å–ø–µ—à–Ω–æ.' }
    failure { echo '‚ùå Pipeline —É–ø–∞–ª, —Å–º–æ—Ç—Ä–∏—Ç–µ –ª–æ–≥–∏.' }
  }
}
