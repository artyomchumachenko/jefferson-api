pipeline {
  agent any

  environment {
    GIT_CREDENTIALS = 'TSSH'
    DEPLOY_DIR      = '/opt/myapp/backend'
    SERVICE_NAME    = 'myapp-backend.service'
    SKIP_BUILD      = 'false'
  }

  stages {
    stage('Prepare') {
      steps {
        deleteDir()
      }
    }

    stage('Checkout') {
      steps {
        sshagent([env.GIT_CREDENTIALS]) {
          sh '''
            if [ ! -d backend ]; then
              git clone git@github.com:artyomchumachenko/jefferson-api.git backend
            fi
            cd backend
            git fetch --all
          '''
        }
      }
    }

    stage('Check Changes') {
      steps {
        script {
          dir('backend') {
            // –ü–æ–ª—É—á–∞–µ–º —Ö—ç—à–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏ —É–¥–∞–ª—ë–Ω–Ω–æ–≥–æ HEAD
            def local  = sh(script: 'git rev-parse HEAD',       returnStdout: true).trim()
            def remote = sh(script: 'git rev-parse origin/master', returnStdout: true).trim()
            if (local == remote) {
              echo "‚ö†Ô∏è –ù–µ—Ç –Ω–æ–≤—ã—Ö –∫–æ–º–º–∏—Ç–æ–≤ (–ª–æ–∫–∞–ª—å–Ω—ã–π –∏ origin/master = ${local}). –ü—Ä–æ–ø—É—Å–∫–∞–µ–º Build & Deploy."
              env.SKIP_BUILD = 'true'
            } else {
              echo "‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–æ–≤—ã–µ –∫–æ–º–º–∏—Ç—ã (–ª–æ–∫–∞–ª—å–Ω—ã–π ${local} vs origin ${remote}). –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º."
            }
          }
        }
      }
    }

    stage('Build') {
      when {
        expression { env.SKIP_BUILD == 'false' }
      }
      steps {
        dir('backend') {
          sh 'git reset --hard origin/master'
          sh 'mvn clean package -DskipTests'
        }
      }
    }

    stage('Deploy') {
      when {
        expression { env.SKIP_BUILD == 'false' }
      }
      steps {
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º workspace/backend ‚Üí –ø—Ä–æ–¥–æ–≤—É—é –ø–∞–ø–∫—É
        sh '''
          rm -rf ${DEPLOY_DIR}/*
          rsync -av --delete backend/ ${DEPLOY_DIR}/
        '''
        // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å
        sh 'systemctl restart ${SERVICE_NAME}'
      }
    }
  }

  post {
    success {
      script {
        if (env.SKIP_BUILD == 'true') {
          echo '‚ÑπÔ∏è Pipeline –∑–∞–≤–µ—Ä—à–∏–ª—Å—è: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ –±—ã–ª–æ.'
        } else {
          echo 'üéâ Pipeline —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–ª –∏ –∑–∞–¥–µ–ø–ª–æ–∏–ª jefferson-api.'
        }
      }
    }
    failure {
      echo '‚ùå –û—à–∏–±–∫–∞ –≤ pipeline, —Å–º–æ—Ç—Ä–∏—Ç–µ –ª–æ–≥–∏.'
    }
  }
}
